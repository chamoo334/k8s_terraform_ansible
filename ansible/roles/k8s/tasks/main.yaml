---
# Execute on all
- name: Update packages
  yum:
    name: "*"
    state: latest

- name: Disable SWAP
  shell: 
    cmd: swapoff -a

- name: Set SELinux in permissive mode
  shell:
    cmd: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

- name: Configure hosts on aws
  
- name: Configure hosts on azure

- name: Configure hosts on gcp

- name: Install iproute Azure and/or gcp
  yum:
    name: iproute
    state: installed
  when: "'aws' not in group_names"

- name: Install iproute AWS
  yum:
    name: iproute-tc
    state: installed
  when: "'aws' in group_names"

- name: Kernel modules configuration
  shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    EOF

- name: Add overlay
  modprobe:
    name: overlay
    state: present

- name: Add br_netfilter
  modprobe:
    name: br_netfilter
    state: present

- name: Update systcl params ipv4, ipv6, and iptables
  shell: |
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF

- name: Sysctl without reboot
  shell: 
    cmd: sysctl --system

- name: Download container runtime interface
  uri:
    url: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/devel:kubic:libcontainers:stable.repo'
    method: GET
    dest: '/etc/yum.repos.d/devel:kubic:libcontainers:stable.repo'
    follow_redirects: safe

- name: Download k8s_version
  uri:
    url: 'https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{k8s_version}}/CentOS_8/devel:kubic:libcontainers:stable:cri-o:{{k8s_version}}.repo'
    method: GET
    dest: '/etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:{{k8s_version}}.repo'
    follow_redirects: safe

- name: Install Container Runtime interface
  yum:
    name: cri-o
    state: installed

- name: Enable & Start CRI
  service:
    name: crio
    enabled: yes
    state: started

- name: Add Kubernetes yum repository
  shell: |
    cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
    [kubernetes]
    name=Kubernetes
    baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    exclude=kubelet kubeadm kubectl
    EOF
  
- name: Install kubeadm, kubelet, and kubectl
  shell: 
    cmd: yum install -y kubelet-{{k8s_version}}* kubeadm-{{k8s_version}}* kubectl-{{k8s_version}}* --disableexcludes=kubernetes
  
- name: Enable & Start Kubelet
  service:
    name: kubelet
    enabled: yes
    state: started

# Execute on controllers
- name: Create cluster
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: sudo kubeadm init --pod-network-cidr="{{pod_network_cidr}}"
  register: init_output
    
- name: Split output by newline
  when: inventory_hostname in groups["controllers"]
  become: false
  set_fact:
    cluster_init: "{{init_output.stdout | split('\n')}}"

- name: Find kubeadm join command
  become: false
  set_fact:
    kube_join: "{{ ( item+next_item ) | replace('\\\t','') | replace('\"','') }}"
  with_items: "{{cluster_init}}"
  when: (inventory_hostname in groups["controllers"]) and ('kubeadm' in item) and (arr_index < (cluster_init | length) - 1)
  loop_control:
    index_var: arr_index
  vars:
    next_item: "{{cluster_init[arr_index + 1]}}"
    
- name: Create .kube directory
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: mkdir -p $HOME/.kube
  
- name: Create admin.conf to user's kube config
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    
- pause: seconds=30
    
- name: update ./kube/config permissions
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: sudo chown $(id -u):$(id -g) $HOME/.kube/config
    
- name: Install Calico pod network add-on
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

- pause: seconds=30

- name: Get pods
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: kubectl get pods --all-namespaces
  register: get_pods
    
- name: Display results of initial pods
  when: inventory_hostname in groups["controllers"]
  debug: 
    msg: "{{ get_pods.stdout_lines }}"

# Execute on workers
- name: Add nodes to Kubernetes cluster
  when: inventory_hostname in groups["workers"]
  vars:
    cluster_controller: "{{group_names[0]}}_controller"
  shell:
    cmd: "{{ hostvars[cluster_controller].kube_join }}"

# Check nodes on controllers
- name: Check nodes
  when: inventory_hostname in groups["controllers"]
  become: false
  shell:
    cmd: kubectl get nodes
  register: get_nodes
    
- name: Display results of node check
  when: inventory_hostname in groups["controllers"]
  debug: 
    msg: "{{ get_nodes.stdout_lines }}"
    
# - name: Unset GCP facts
#   set_fact:
#     kube_join: null
#     cluster_init: null
#   when: (inventory_hostname in groups["controllers"]) and (kube_join is defined)