---
# tasks file for aws

- name: Update packages
  yum:
    name: "*"
    state: latest
- name: Disable SWAP
  shell: 
    cmd: swapoff -a
- name: Set SELinux in permissive mode
  shell:
    cmd: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
- name: Configure hosts
  shell: |
    cat <<EOF | sudo tee /etc/hosts
    172.31.24.88 k8s-controller
    172.31.23.249 k8s-worker-1
    172.31.22.36 k8s-worker-2
    EOF
- name: Install iproute
  yum:
    name: iproute-tc
    state: installed
- name: Kernel modules configuration
  become: no
  shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    EOF
- name: Add overlay
  modprobe:
    name: overlay
    state: present
- name: Add br_netfilter
  modprobe:
    name: br_netfilter
    state: present
- name: Update systcl params ipv4, ipv6, and iptables
  become: no
  shell: |
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF
- name: Sysctl without reboot
  shell: 
    cmd: sysctl --system
- name: Download container runtime interface
  uri:
    url: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/devel:kubic:libcontainers:stable.repo'
    method: GET
    dest: '/etc/yum.repos.d/devel:kubic:libcontainers:stable.repo'
    follow_redirects: safe
- name: Download k8s_version
  uri:
    url: 'https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{k8s_version}}/CentOS_8/devel:kubic:libcontainers:stable:cri-o:{{k8s_version}}.repo'
    method: GET
    dest: '/etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:{{k8s_version}}.repo'
    follow_redirects: safe
- name: Install Container Runtime interface
  yum:
    name: cri-o
    state: installed
- name: Enable & Start CRI
  service:
    name: crio
    enabled: yes
    state: started
- name: Add Kubernetes yum repository
  shell: |
    cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
    [kubernetes]
    name=Kubernetes
    baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    exclude=kubelet kubeadm kubectl
    EOF
- name: Install kubeadm, kubelet, and kubectl
  shell: 
    cmd: yum install -y kubelet-{{k8s_version}}* kubeadm-{{k8s_version}}* kubectl-{{k8s_version}}* --disableexcludes=kubernetes
- name: Enable & Start Kubelet
  service:
    name: kubelet
    enabled: yes
    state: started
- name: Create cluster
  delegate_to: aws_controller
  shell: |
    kubeadm reset -f
    kubeadm init --pod-network-cidr="{{pod_network_cidr}}"
  register: init_output
- name: Split output by newline
  delegate_to: aws_controller
  set_fact:
    cluster_init: "{{init_output.stdout | split('\n')}}"
- name: Execute mkdir, cp, and chown commands
  delegate_to: aws_controller
  shell:
    cmd: "{{item}}"
  with_items: "{{cluster_init}}"
  when: "'mkdir' in item or 'sudo' in item"
- name: Find kubeadm join command
  delegate_to: localhost
  become: no
  set_fact:
    kubeadm_join_command: "{{ ( item+next_item ) | replace('\\\t','') }}"
  with_items: "{{cluster_init}}"
  when: "'kubeadm' in item and arr_index < (cluster_init | length) - 1"
  loop_control:
    index_var: arr_index
  vars:
    next_item: "{{cluster_init[arr_index + 1]}}"
- name: Remove Taints
  delegate_to: aws_controller
  shell:
    cmd: kubectl taint nodes --all node-role.kubernetes.io/master-
- name: Install Calico pod network add-on
  delegate_to: aws_controller
  shell:
    cmd: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
- name: Get pods
  delegate_to: aws_controller
  shell: |
    kubectl get pods --all-namespaces
  register: get_pods
- name: Display results of initial pods
  delegate_to: aws_controller
  debug: 
    msg: "{{ get_pods.stdout_lines }}"
- name: Add worker nodes to AWS Kubernetes cluster
  delegate_to: "{{item}}"
  loop: "{{groups['aws_workers']}}"
  shell:
    cmd: "{{kubeadm_join_command}}"
- name: Get nodes
  delegate_to: aws_controller
  shell:
    cmd: kubectl get nodes
  register: get_nodes
- name: Display results of initial nodes
  delegate_to: aws_controller
  debug: 
    msg: "{{ get_nodes.stdout_lines }}"
- name: Unset kubeadm_join_command fact
  set_fact:
    kubeadm_join_command: null
  when: kubeadm_join_command is defined
- name: Unset cluster_init fact
  set_fact:
    cluster_init: null
  when: cluster_init is defined
